Neuronova síť dokumentace

Cíl:
spracovávat fotky 

Neuron
    Neuron je spojen s ostatnimy neurony v síť.
    Každý neuroun masvýj vysledek který posílá dál dasším neuronům,
    až se eventuleně dostane k výsledku.
    Přeposílaná data se nazi vají imput.
    Výsledek neuronu zjistíme tím že imput vynásobýme váhou (weight) a 
    přičteme bias.
    neuron = imput*weight + bias

Bias a weight
    Pomocí těchto dvou hodnot nastavujeme neuronovou síť.
    Tyto dvě hodnoty upravují výsledek pravě z neurono a tím síť v
    tom lepčí případě zdokonalují a opravijí předešlé chyby. 
Tvar / Shape
    Tvar určuje jak velký je list a kolik listů je v listu.     
    Prozor záleží na typu listu.
    List = [1, 2, 3]        Shape: (3)          1D, List        List ==     Array ==        Vektor
    List = [[1, 2, 3],      Shape: (2, 3)       2D, Matrix      Python      Programování    Matematika
            [1, 2, 3]]
    List = [[[1, 2, 3],     Shape: (3, 2, 3) = tři listy po dvou listech s třemi hodnotami
                [1, 2, 3]],                     3D, Array
            [[1, 2, 3],
                [1, 2, 3]],
            [[1, 2, 3],
                [1, 2, 3]]]
Tensor
    předmět který jze zobrazyt jako list
Dot product
    Sčítání listů.
    Končí jednou skalární veličinou.
    a = [1, 2, 3]
    b = [2, 3, 4]
    dot_product = a[0]*b[0] + a[1]*b[1] + a[2]*b[2]
    dot_product = [1, 2, 3] * [2, 3, 4] = 1*2 + 2*3 + 3*4 = 20
Imput
    Pro imputy je vhodné dávat je neuronům v menších dávkách
    než po jednom
    Idealní velikost jedné davky je 32 naráz. (batch size)
Produkt matrixu 
    Jedná so o sčítání dvou matryxů (2D listů).
    Tímto způsobem :
        Pro získání první hodnoty se musí vynásobyt první hodnota v prvním
        řádku listu v jednom metrixu s první hodnotou prvního sloupce
        v listu druhém. A stejným spusobem to pokračuje na druhé hodnoty a třetí a ...
        Takto zíáskané hodnoty se navtájem sečtou a výsledným součtem těch to hodnot je 
        první pole v novém metrixu.
    Sčítání pokračuje tímto způsobem:
        Nejprve se musí sečíts první řádek se všemi sloupci v metrixu.
        Nasledně drůhý řádek se všemi sloupci pak třetí ...
Transpose
    Zmnění v metrixu řádky na sloupce
    Volání: .T

Nastavení vah /weight
    Idealní je, je nastavit v rozmezí -1 až 1.
    Problem je vrom že pokud je váha větší než 1 tak imputy rostou
    exponencionálně.

Nastaveni biasu
    Biasi se obyčejně nastavují jako 0 - pro jejich lepší inicializaci a 
    za cílem hledání chyb.

np.random.randn()
    Vytváří lysty nebo matrixi s nahodnými za pomocí - Gaussovo rozdělení
    nebo normální rozdělení s průměrem 0 a směrodatnou odchylkou 1 
    (Počet hodnot v jednom lystu, Počet lystů)

np.zeros()
    Vytvoří lyst plný nul stím že do závorky se musí zadar Tvar / Shape 
np.maximum()
    Porovnává dvě hodnoty nebo lysty a vypysuje největší hodnoty na stejném místě
    např.   array1 = np.array([1, 5, 2, 7])
            array2 = np.array([3, 2, 8, 1])
            vysledek = [3 5 8 7]
            
Activation function
    Funkce přes kterou upravujeme output neuronu.
    Využívají se proto že samotný output nemusí vyhovovat požadavkum na danou CNN.
    Aktivační funkce tedy output upravý tak aby vyhovoval požadavkům lépe
    a přispůsobyl se.

Step function
        Pokud je imput větší než 0 tak se rovná 1.
        Pokud ne tak se rovná 0

Sigmoid function
    Rozdíl mezi Step function a touto funkce je že dostaneme 
    output s rozptylem.
    Např. misto 1 nebo 0 muže me dosta hodnotu mezi 1 nebo 0 => 0,5.

Rectified linear unit
    Pokud je neznámá větší než 0 tak output je neznámá.
    Ale pokud je menší než 0 tak se rovná nule

